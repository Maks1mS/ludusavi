//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: Message + NSCoding> NSCoding for NSSet<ObjectType> {}

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: IsIdCloneable> NSCopying for NSSet<ObjectType> {}

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: Message> NSFastEnumeration for NSSet<ObjectType> {}

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: IsIdCloneable> NSMutableCopying for NSSet<ObjectType> {}

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: Message> NSObjectProtocol for NSSet<ObjectType> {}

#[cfg(feature = "Foundation_NSSet")]
unsafe impl<ObjectType: Message + NSSecureCoding> NSSecureCoding for NSSet<ObjectType> {}

extern_methods!(
    #[cfg(feature = "Foundation_NSSet")]
    unsafe impl<ObjectType: Message> NSSet<ObjectType> {
        #[method(count)]
        pub fn count(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other member:)]
        pub unsafe fn member(&self, object: &ObjectType) -> Option<Id<ObjectType>>;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other objectEnumerator)]
        pub unsafe fn objectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithObjects:count:)]
        pub unsafe fn initWithObjects_count(
            this: Option<Allocated<Self>>,
            objects: *mut NonNull<ObjectType>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "Foundation_NSSet")]
    unsafe impl<ObjectType: Message> NSSet<ObjectType> {
        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Id<Self>;
    }
);
#[cfg(feature = "Foundation_NSSet")]
impl<ObjectType: Message> DefaultId for NSSet<ObjectType> {
    #[inline]
    fn default_id() -> Id<Self> {
        Self::new()
    }
}

extern_methods!(
    /// NSExtendedSet
    #[cfg(feature = "Foundation_NSSet")]
    unsafe impl<ObjectType: Message> NSSet<ObjectType> {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allObjects)]
        pub unsafe fn allObjects(&self) -> Id<NSArray<ObjectType>>;

        #[method_id(@__retain_semantics Other anyObject)]
        pub unsafe fn anyObject(&self) -> Option<Id<ObjectType>>;

        #[method(containsObject:)]
        pub unsafe fn containsObject(&self, an_object: &ObjectType) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other description)]
        pub unsafe fn description(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other descriptionWithLocale:)]
        pub unsafe fn descriptionWithLocale(&self, locale: Option<&AnyObject>) -> Id<NSString>;

        #[method(intersectsSet:)]
        pub unsafe fn intersectsSet(&self, other_set: &NSSet<ObjectType>) -> bool;

        #[method(isEqualToSet:)]
        pub unsafe fn isEqualToSet(&self, other_set: &NSSet<ObjectType>) -> bool;

        #[method(isSubsetOfSet:)]
        pub unsafe fn isSubsetOfSet(&self, other_set: &NSSet<ObjectType>) -> bool;

        #[method(makeObjectsPerformSelector:)]
        pub unsafe fn makeObjectsPerformSelector(&self, a_selector: Sel);

        #[method(makeObjectsPerformSelector:withObject:)]
        pub unsafe fn makeObjectsPerformSelector_withObject(
            &self,
            a_selector: Sel,
            argument: Option<&AnyObject>,
        );

        #[method_id(@__retain_semantics Other setByAddingObject:)]
        pub unsafe fn setByAddingObject(&self, an_object: &ObjectType) -> Id<NSSet<ObjectType>>;

        #[method_id(@__retain_semantics Other setByAddingObjectsFromSet:)]
        pub unsafe fn setByAddingObjectsFromSet(
            &self,
            other: &NSSet<ObjectType>,
        ) -> Id<NSSet<ObjectType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other setByAddingObjectsFromArray:)]
        pub unsafe fn setByAddingObjectsFromArray(
            &self,
            other: &NSArray<ObjectType>,
        ) -> Id<NSSet<ObjectType>>;

        #[method(enumerateObjectsUsingBlock:)]
        pub unsafe fn enumerateObjectsUsingBlock(
            &self,
            block: &Block<(NonNull<ObjectType>, NonNull<Bool>), ()>,
        );

        #[method(enumerateObjectsWithOptions:usingBlock:)]
        pub unsafe fn enumerateObjectsWithOptions_usingBlock(
            &self,
            opts: NSEnumerationOptions,
            block: &Block<(NonNull<ObjectType>, NonNull<Bool>), ()>,
        );

        #[method_id(@__retain_semantics Other objectsPassingTest:)]
        pub unsafe fn objectsPassingTest(
            &self,
            predicate: &Block<(NonNull<ObjectType>, NonNull<Bool>), Bool>,
        ) -> Id<NSSet<ObjectType>>;

        #[method_id(@__retain_semantics Other objectsWithOptions:passingTest:)]
        pub unsafe fn objectsWithOptions_passingTest(
            &self,
            opts: NSEnumerationOptions,
            predicate: &Block<(NonNull<ObjectType>, NonNull<Bool>), Bool>,
        ) -> Id<NSSet<ObjectType>>;
    }
);

extern_methods!(
    /// NSSetCreation
    #[cfg(feature = "Foundation_NSSet")]
    unsafe impl<ObjectType: Message> NSSet<ObjectType> {
        #[method_id(@__retain_semantics Other set)]
        pub unsafe fn set() -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithObject:)]
        pub unsafe fn setWithObject(object: &ObjectType) -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithObjects:count:)]
        pub unsafe fn setWithObjects_count(
            objects: NonNull<NonNull<ObjectType>>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithSet:)]
        pub unsafe fn setWithSet(set: &NSSet<ObjectType>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other setWithArray:)]
        pub unsafe fn setWithArray(array: &NSArray<ObjectType>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSet:)]
        pub unsafe fn initWithSet(
            this: Option<Allocated<Self>>,
            set: &NSSet<ObjectType>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSet:copyItems:)]
        pub unsafe fn initWithSet_copyItems(
            this: Option<Allocated<Self>>,
            set: &NSSet<ObjectType>,
            flag: bool,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithArray:)]
        pub unsafe fn initWithArray(
            this: Option<Allocated<Self>>,
            array: &NSArray<ObjectType>,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSSet`
    ///
    /// NSSetCreation
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[method_id(@__retain_semantics Other set)]
        pub unsafe fn set() -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithObject:)]
        pub unsafe fn setWithObject(object: &ObjectType) -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithObjects:count:)]
        pub unsafe fn setWithObjects_count(
            objects: NonNull<NonNull<ObjectType>>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other setWithSet:)]
        pub unsafe fn setWithSet(set: &NSSet<ObjectType>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other setWithArray:)]
        pub unsafe fn setWithArray(array: &NSArray<ObjectType>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSet:)]
        pub unsafe fn initWithSet(
            this: Option<Allocated<Self>>,
            set: &NSSet<ObjectType>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSet:copyItems:)]
        pub unsafe fn initWithSet_copyItems(
            this: Option<Allocated<Self>>,
            set: &NSSet<ObjectType>,
            flag: bool,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithArray:)]
        pub unsafe fn initWithArray(
            this: Option<Allocated<Self>>,
            array: &NSArray<ObjectType>,
        ) -> Id<Self>;
    }
);

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: Message + NSCoding> NSCoding for NSMutableSet<ObjectType> {}

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: IsIdCloneable> NSCopying for NSMutableSet<ObjectType> {}

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: Message> NSFastEnumeration for NSMutableSet<ObjectType> {}

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: IsIdCloneable> NSMutableCopying for NSMutableSet<ObjectType> {}

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: Message> NSObjectProtocol for NSMutableSet<ObjectType> {}

#[cfg(feature = "Foundation_NSMutableSet")]
unsafe impl<ObjectType: Message + NSSecureCoding> NSSecureCoding for NSMutableSet<ObjectType> {}

extern_methods!(
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[method(addObject:)]
        pub unsafe fn addObject(&mut self, object: &ObjectType);

        #[method(removeObject:)]
        pub unsafe fn removeObject(&mut self, object: &ObjectType);

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithCapacity:)]
        pub unsafe fn initWithCapacity(
            this: Option<Allocated<Self>>,
            num_items: NSUInteger,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSSet`
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[method_id(@__retain_semantics Init initWithObjects:count:)]
        pub unsafe fn initWithObjects_count(
            this: Option<Allocated<Self>>,
            objects: *mut NonNull<ObjectType>,
            cnt: NSUInteger,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Id<Self>;
    }
);
#[cfg(feature = "Foundation_NSMutableSet")]
impl<ObjectType: Message> DefaultId for NSMutableSet<ObjectType> {
    #[inline]
    fn default_id() -> Id<Self> {
        Self::new()
    }
}

extern_methods!(
    /// NSExtendedMutableSet
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[cfg(feature = "Foundation_NSArray")]
        #[method(addObjectsFromArray:)]
        pub unsafe fn addObjectsFromArray(&mut self, array: &NSArray<ObjectType>);

        #[cfg(feature = "Foundation_NSSet")]
        #[method(intersectSet:)]
        pub unsafe fn intersectSet(&mut self, other_set: &NSSet<ObjectType>);

        #[cfg(feature = "Foundation_NSSet")]
        #[method(minusSet:)]
        pub unsafe fn minusSet(&mut self, other_set: &NSSet<ObjectType>);

        #[method(removeAllObjects)]
        pub fn removeAllObjects(&mut self);

        #[cfg(feature = "Foundation_NSSet")]
        #[method(unionSet:)]
        pub unsafe fn unionSet(&mut self, other_set: &NSSet<ObjectType>);

        #[cfg(feature = "Foundation_NSSet")]
        #[method(setSet:)]
        pub unsafe fn setSet(&mut self, other_set: &NSSet<ObjectType>);
    }
);

extern_methods!(
    /// NSMutableSetCreation
    #[cfg(feature = "Foundation_NSMutableSet")]
    unsafe impl<ObjectType: Message> NSMutableSet<ObjectType> {
        #[method_id(@__retain_semantics Other setWithCapacity:)]
        pub unsafe fn setWithCapacity(num_items: NSUInteger) -> Id<Self>;
    }
);

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: Message + NSCoding> NSCoding for NSCountedSet<ObjectType> {}

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: IsIdCloneable> NSCopying for NSCountedSet<ObjectType> {}

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: Message> NSFastEnumeration for NSCountedSet<ObjectType> {}

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: IsIdCloneable> NSMutableCopying for NSCountedSet<ObjectType> {}

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: Message> NSObjectProtocol for NSCountedSet<ObjectType> {}

#[cfg(feature = "Foundation_NSCountedSet")]
unsafe impl<ObjectType: Message + NSSecureCoding> NSSecureCoding for NSCountedSet<ObjectType> {}

extern_methods!(
    #[cfg(feature = "Foundation_NSCountedSet")]
    unsafe impl<ObjectType: Message> NSCountedSet<ObjectType> {
        #[method_id(@__retain_semantics Init initWithCapacity:)]
        pub unsafe fn initWithCapacity(
            this: Option<Allocated<Self>>,
            num_items: NSUInteger,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithArray:)]
        pub unsafe fn initWithArray(
            this: Option<Allocated<Self>>,
            array: &NSArray<ObjectType>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithSet:)]
        pub unsafe fn initWithSet(
            this: Option<Allocated<Self>>,
            set: &NSSet<ObjectType>,
        ) -> Id<Self>;

        #[method(countForObject:)]
        pub unsafe fn countForObject(&self, object: &ObjectType) -> NSUInteger;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other objectEnumerator)]
        pub unsafe fn objectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

        #[method(addObject:)]
        pub unsafe fn addObject(&self, object: &ObjectType);

        #[method(removeObject:)]
        pub unsafe fn removeObject(&self, object: &ObjectType);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSMutableSet`
    #[cfg(feature = "Foundation_NSCountedSet")]
    unsafe impl<ObjectType: Message> NSCountedSet<ObjectType> {
        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSSet`
    #[cfg(feature = "Foundation_NSCountedSet")]
    unsafe impl<ObjectType: Message> NSCountedSet<ObjectType> {
        #[method_id(@__retain_semantics Init initWithObjects:count:)]
        pub unsafe fn initWithObjects_count(
            this: Option<Allocated<Self>>,
            objects: *mut NonNull<ObjectType>,
            cnt: NSUInteger,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "Foundation_NSCountedSet")]
    unsafe impl<ObjectType: Message> NSCountedSet<ObjectType> {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
