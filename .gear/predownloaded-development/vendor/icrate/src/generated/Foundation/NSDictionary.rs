//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: Message + NSCoding, ObjectType: Message + NSCoding> NSCoding
    for NSDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: IsIdCloneable, ObjectType: IsIdCloneable> NSCopying
    for NSDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: Message, ObjectType: Message> NSFastEnumeration
    for NSDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: IsIdCloneable, ObjectType: IsIdCloneable> NSMutableCopying
    for NSDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: Message, ObjectType: Message> NSObjectProtocol
    for NSDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSDictionary")]
unsafe impl<KeyType: Message + NSSecureCoding, ObjectType: Message + NSSecureCoding> NSSecureCoding
    for NSDictionary<KeyType, ObjectType>
{
}

extern_methods!(
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[method(count)]
        pub fn count(&self) -> NSUInteger;

        #[method_id(@__retain_semantics Other objectForKey:)]
        pub unsafe fn objectForKey(&self, a_key: &KeyType) -> Option<Id<ObjectType>>;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other keyEnumerator)]
        pub unsafe fn keyEnumerator(&self) -> Id<NSEnumerator<KeyType>>;

        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithObjects:forKeys:count:)]
        pub unsafe fn initWithObjects_forKeys_count(
            this: Option<Allocated<Self>>,
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<AnyObject>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Id<Self>;
    }
);
#[cfg(feature = "Foundation_NSDictionary")]
impl<KeyType: Message, ObjectType: Message> DefaultId for NSDictionary<KeyType, ObjectType> {
    #[inline]
    fn default_id() -> Id<Self> {
        Self::new()
    }
}

extern_methods!(
    /// NSExtendedDictionary
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allKeys)]
        pub unsafe fn allKeys(&self) -> Id<NSArray<KeyType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allKeysForObject:)]
        pub unsafe fn allKeysForObject(&self, an_object: &ObjectType) -> Id<NSArray<KeyType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other allValues)]
        pub unsafe fn allValues(&self) -> Id<NSArray<ObjectType>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other description)]
        pub unsafe fn description(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other descriptionInStringsFileFormat)]
        pub unsafe fn descriptionInStringsFileFormat(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other descriptionWithLocale:)]
        pub unsafe fn descriptionWithLocale(&self, locale: Option<&AnyObject>) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other descriptionWithLocale:indent:)]
        pub unsafe fn descriptionWithLocale_indent(
            &self,
            locale: Option<&AnyObject>,
            level: NSUInteger,
        ) -> Id<NSString>;

        #[method(isEqualToDictionary:)]
        pub unsafe fn isEqualToDictionary(
            &self,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSEnumerator")]
        #[method_id(@__retain_semantics Other objectEnumerator)]
        pub unsafe fn objectEnumerator(&self) -> Id<NSEnumerator<ObjectType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other objectsForKeys:notFoundMarker:)]
        pub unsafe fn objectsForKeys_notFoundMarker(
            &self,
            keys: &NSArray<KeyType>,
            marker: &ObjectType,
        ) -> Id<NSArray<ObjectType>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[method(writeToURL:error:_)]
        pub unsafe fn writeToURL_error(&self, url: &NSURL) -> Result<(), Id<NSError>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other keysSortedByValueUsingSelector:)]
        pub unsafe fn keysSortedByValueUsingSelector(
            &self,
            comparator: Sel,
        ) -> Id<NSArray<KeyType>>;

        #[method(getObjects:andKeys:count:)]
        pub unsafe fn getObjects_andKeys_count(
            &self,
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<KeyType>,
            count: NSUInteger,
        );

        #[method_id(@__retain_semantics Other objectForKeyedSubscript:)]
        pub unsafe fn objectForKeyedSubscript(&self, key: &KeyType) -> Option<Id<ObjectType>>;

        #[method(enumerateKeysAndObjectsUsingBlock:)]
        pub unsafe fn enumerateKeysAndObjectsUsingBlock(
            &self,
            block: &Block<(NonNull<KeyType>, NonNull<ObjectType>, NonNull<Bool>), ()>,
        );

        #[method(enumerateKeysAndObjectsWithOptions:usingBlock:)]
        pub unsafe fn enumerateKeysAndObjectsWithOptions_usingBlock(
            &self,
            opts: NSEnumerationOptions,
            block: &Block<(NonNull<KeyType>, NonNull<ObjectType>, NonNull<Bool>), ()>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other keysSortedByValueUsingComparator:)]
        pub unsafe fn keysSortedByValueUsingComparator(
            &self,
            cmptr: NSComparator,
        ) -> Id<NSArray<KeyType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other keysSortedByValueWithOptions:usingComparator:)]
        pub unsafe fn keysSortedByValueWithOptions_usingComparator(
            &self,
            opts: NSSortOptions,
            cmptr: NSComparator,
        ) -> Id<NSArray<KeyType>>;

        #[cfg(feature = "Foundation_NSSet")]
        #[method_id(@__retain_semantics Other keysOfEntriesPassingTest:)]
        pub unsafe fn keysOfEntriesPassingTest(
            &self,
            predicate: &Block<(NonNull<KeyType>, NonNull<ObjectType>, NonNull<Bool>), Bool>,
        ) -> Id<NSSet<KeyType>>;

        #[cfg(feature = "Foundation_NSSet")]
        #[method_id(@__retain_semantics Other keysOfEntriesWithOptions:passingTest:)]
        pub unsafe fn keysOfEntriesWithOptions_passingTest(
            &self,
            opts: NSEnumerationOptions,
            predicate: &Block<(NonNull<KeyType>, NonNull<ObjectType>, NonNull<Bool>), Bool>,
        ) -> Id<NSSet<KeyType>>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[deprecated = "Use -getObjects:andKeys:count: instead"]
        #[method(getObjects:andKeys:)]
        pub unsafe fn getObjects_andKeys(
            &self,
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<KeyType>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated]
        #[method_id(@__retain_semantics Other dictionaryWithContentsOfFile:)]
        pub unsafe fn dictionaryWithContentsOfFile(
            path: &NSString,
        ) -> Option<Id<NSDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated]
        #[method_id(@__retain_semantics Other dictionaryWithContentsOfURL:)]
        pub unsafe fn dictionaryWithContentsOfURL(
            url: &NSURL,
        ) -> Option<Id<NSDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated]
        #[method_id(@__retain_semantics Init initWithContentsOfFile:)]
        pub unsafe fn initWithContentsOfFile(
            this: Option<Allocated<Self>>,
            path: &NSString,
        ) -> Option<Id<NSDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:)]
        pub unsafe fn initWithContentsOfURL(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Option<Id<NSDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSString")]
        #[deprecated]
        #[method(writeToFile:atomically:)]
        pub unsafe fn writeToFile_atomically(
            &self,
            path: &NSString,
            use_auxiliary_file: bool,
        ) -> bool;

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated]
        #[method(writeToURL:atomically:)]
        pub unsafe fn writeToURL_atomically(&self, url: &NSURL, atomically: bool) -> bool;
    }
);

extern_methods!(
    /// NSDictionaryCreation
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics Other dictionary)]
        pub unsafe fn dictionary() -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithObject:forKey:)]
        pub unsafe fn dictionaryWithObject_forKey(object: &ObjectType, key: &AnyObject)
            -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithObjects:forKeys:count:)]
        pub unsafe fn dictionaryWithObjects_forKeys_count(
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<AnyObject>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithDictionary:)]
        pub unsafe fn dictionaryWithDictionary(
            dict: &NSDictionary<KeyType, ObjectType>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other dictionaryWithObjects:forKeys:)]
        pub unsafe fn dictionaryWithObjects_forKeys(
            objects: &NSArray<ObjectType>,
            keys: &NSArray<AnyObject>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithDictionary:)]
        pub unsafe fn initWithDictionary(
            this: Option<Allocated<Self>>,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithDictionary:copyItems:)]
        pub unsafe fn initWithDictionary_copyItems(
            this: Option<Allocated<Self>>,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
            flag: bool,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithObjects:forKeys:)]
        pub unsafe fn initWithObjects_forKeys(
            this: Option<Allocated<Self>>,
            objects: &NSArray<ObjectType>,
            keys: &NSArray<AnyObject>,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSDictionary`
    ///
    /// NSDictionaryCreation
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics Other dictionary)]
        pub unsafe fn dictionary() -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithObject:forKey:)]
        pub unsafe fn dictionaryWithObject_forKey(object: &ObjectType, key: &AnyObject)
            -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithObjects:forKeys:count:)]
        pub unsafe fn dictionaryWithObjects_forKeys_count(
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<AnyObject>,
            cnt: NSUInteger,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other dictionaryWithDictionary:)]
        pub unsafe fn dictionaryWithDictionary(
            dict: &NSDictionary<KeyType, ObjectType>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other dictionaryWithObjects:forKeys:)]
        pub unsafe fn dictionaryWithObjects_forKeys(
            objects: &NSArray<ObjectType>,
            keys: &NSArray<AnyObject>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithDictionary:)]
        pub unsafe fn initWithDictionary(
            this: Option<Allocated<Self>>,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithDictionary:copyItems:)]
        pub unsafe fn initWithDictionary_copyItems(
            this: Option<Allocated<Self>>,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
            flag: bool,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Init initWithObjects:forKeys:)]
        pub unsafe fn initWithObjects_forKeys(
            this: Option<Allocated<Self>>,
            objects: &NSArray<ObjectType>,
            keys: &NSArray<AnyObject>,
        ) -> Id<Self>;
    }
);

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: Message + NSCoding, ObjectType: Message + NSCoding> NSCoding
    for NSMutableDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: IsIdCloneable, ObjectType: IsIdCloneable> NSCopying
    for NSMutableDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: Message, ObjectType: Message> NSFastEnumeration
    for NSMutableDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: IsIdCloneable, ObjectType: IsIdCloneable> NSMutableCopying
    for NSMutableDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: Message, ObjectType: Message> NSObjectProtocol
    for NSMutableDictionary<KeyType, ObjectType>
{
}

#[cfg(feature = "Foundation_NSMutableDictionary")]
unsafe impl<KeyType: Message + NSSecureCoding, ObjectType: Message + NSSecureCoding> NSSecureCoding
    for NSMutableDictionary<KeyType, ObjectType>
{
}

extern_methods!(
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method(removeObjectForKey:)]
        pub fn removeObjectForKey(&mut self, a_key: &KeyType);

        #[method(setObject:forKey:)]
        pub unsafe fn setObject_forKey(&mut self, an_object: &ObjectType, a_key: &AnyObject);

        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics Init initWithCapacity:)]
        pub unsafe fn initWithCapacity(
            this: Option<Allocated<Self>>,
            num_items: NSUInteger,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSDictionary`
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics Init initWithObjects:forKeys:count:)]
        pub unsafe fn initWithObjects_forKeys_count(
            this: Option<Allocated<Self>>,
            objects: *mut NonNull<ObjectType>,
            keys: *mut NonNull<AnyObject>,
            cnt: NSUInteger,
        ) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Id<Self>;
    }
);
#[cfg(feature = "Foundation_NSMutableDictionary")]
impl<KeyType: Message, ObjectType: Message> DefaultId for NSMutableDictionary<KeyType, ObjectType> {
    #[inline]
    fn default_id() -> Id<Self> {
        Self::new()
    }
}

extern_methods!(
    /// NSExtendedMutableDictionary
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(addEntriesFromDictionary:)]
        pub unsafe fn addEntriesFromDictionary(
            &mut self,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
        );

        #[method(removeAllObjects)]
        pub fn removeAllObjects(&mut self);

        #[cfg(feature = "Foundation_NSArray")]
        #[method(removeObjectsForKeys:)]
        pub unsafe fn removeObjectsForKeys(&mut self, key_array: &NSArray<KeyType>);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setDictionary:)]
        pub unsafe fn setDictionary(
            &mut self,
            other_dictionary: &NSDictionary<KeyType, ObjectType>,
        );

        #[method(setObject:forKeyedSubscript:)]
        pub unsafe fn setObject_forKeyedSubscript(
            &mut self,
            obj: Option<&ObjectType>,
            key: &AnyObject,
        );
    }
);

extern_methods!(
    /// NSMutableDictionaryCreation
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics Other dictionaryWithCapacity:)]
        pub unsafe fn dictionaryWithCapacity(num_items: NSUInteger) -> Id<Self>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other dictionaryWithContentsOfFile:)]
        pub unsafe fn dictionaryWithContentsOfFile(
            path: &NSString,
        ) -> Option<Id<NSMutableDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other dictionaryWithContentsOfURL:)]
        pub unsafe fn dictionaryWithContentsOfURL(
            url: &NSURL,
        ) -> Option<Id<NSMutableDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithContentsOfFile:)]
        pub unsafe fn initWithContentsOfFile(
            this: Option<Allocated<Self>>,
            path: &NSString,
        ) -> Option<Id<NSMutableDictionary<KeyType, ObjectType>>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:)]
        pub unsafe fn initWithContentsOfURL(
            this: Option<Allocated<Self>>,
            url: &NSURL,
        ) -> Option<Id<NSMutableDictionary<KeyType, ObjectType>>>;
    }
);

extern_methods!(
    /// NSSharedKeySetDictionary
    #[cfg(feature = "Foundation_NSDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSDictionary<KeyType, ObjectType> {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other sharedKeySetForKeys:)]
        pub unsafe fn sharedKeySetForKeys(keys: &NSArray<AnyObject>) -> Id<AnyObject>;
    }
);

extern_methods!(
    /// NSSharedKeySetDictionary
    #[cfg(feature = "Foundation_NSMutableDictionary")]
    unsafe impl<KeyType: Message, ObjectType: Message> NSMutableDictionary<KeyType, ObjectType> {
        #[method_id(@__retain_semantics Other dictionaryWithSharedKeySet:)]
        pub unsafe fn dictionaryWithSharedKeySet(
            keyset: &AnyObject,
        ) -> Id<NSMutableDictionary<KeyType, ObjectType>>;
    }
);
