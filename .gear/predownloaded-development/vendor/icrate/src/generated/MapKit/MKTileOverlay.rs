//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Contacts::*;
use crate::CoreLocation::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "MapKit_MKTileOverlay")]
    pub struct MKTileOverlay;

    #[cfg(feature = "MapKit_MKTileOverlay")]
    unsafe impl ClassType for MKTileOverlay {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl MKAnnotation for MKTileOverlay {}

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl MKOverlay for MKTileOverlay {}

#[cfg(feature = "MapKit_MKTileOverlay")]
unsafe impl NSObjectProtocol for MKTileOverlay {}

extern_methods!(
    #[cfg(feature = "MapKit_MKTileOverlay")]
    unsafe impl MKTileOverlay {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithURLTemplate:)]
        pub unsafe fn initWithURLTemplate(
            this: Option<Allocated<Self>>,
            url_template: Option<&NSString>,
        ) -> Id<Self>;

        #[method(tileSize)]
        pub unsafe fn tileSize(&self) -> CGSize;

        #[method(setTileSize:)]
        pub unsafe fn setTileSize(&self, tile_size: CGSize);

        #[method(isGeometryFlipped)]
        pub unsafe fn isGeometryFlipped(&self) -> bool;

        #[method(setGeometryFlipped:)]
        pub unsafe fn setGeometryFlipped(&self, geometry_flipped: bool);

        #[method(minimumZ)]
        pub unsafe fn minimumZ(&self) -> NSInteger;

        #[method(setMinimumZ:)]
        pub unsafe fn setMinimumZ(&self, minimum_z: NSInteger);

        #[method(maximumZ)]
        pub unsafe fn maximumZ(&self) -> NSInteger;

        #[method(setMaximumZ:)]
        pub unsafe fn setMaximumZ(&self, maximum_z: NSInteger);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other URLTemplate)]
        pub unsafe fn URLTemplate(&self) -> Option<Id<NSString>>;

        #[method(canReplaceMapContent)]
        pub unsafe fn canReplaceMapContent(&self) -> bool;

        #[method(setCanReplaceMapContent:)]
        pub unsafe fn setCanReplaceMapContent(&self, can_replace_map_content: bool);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "MapKit_MKTileOverlay")]
    unsafe impl MKTileOverlay {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_struct!(
    #[encoding_name("?")]
    pub struct MKTileOverlayPath {
        pub x: NSInteger,
        pub y: NSInteger,
        pub z: NSInteger,
        pub contentScaleFactor: CGFloat,
    }
);

extern_methods!(
    /// CustomLoading
    #[cfg(feature = "MapKit_MKTileOverlay")]
    unsafe impl MKTileOverlay {
        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other URLForTilePath:)]
        pub unsafe fn URLForTilePath(&self, path: MKTileOverlayPath) -> Id<NSURL>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSError"))]
        #[method(loadTileAtPath:result:)]
        pub unsafe fn loadTileAtPath_result(
            &self,
            path: MKTileOverlayPath,
            result: &Block<(*mut NSData, *mut NSError), ()>,
        );
    }
);
