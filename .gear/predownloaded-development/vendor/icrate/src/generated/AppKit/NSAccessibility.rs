//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_methods!(
    /// NSWorkspaceAccessibilityDisplay
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[method(accessibilityDisplayShouldIncreaseContrast)]
        pub unsafe fn accessibilityDisplayShouldIncreaseContrast(&self) -> bool;

        #[method(accessibilityDisplayShouldDifferentiateWithoutColor)]
        pub unsafe fn accessibilityDisplayShouldDifferentiateWithoutColor(&self) -> bool;

        #[method(accessibilityDisplayShouldReduceTransparency)]
        pub unsafe fn accessibilityDisplayShouldReduceTransparency(&self) -> bool;

        #[method(accessibilityDisplayShouldReduceMotion)]
        pub unsafe fn accessibilityDisplayShouldReduceMotion(&self) -> bool;

        #[method(accessibilityDisplayShouldInvertColors)]
        pub unsafe fn accessibilityDisplayShouldInvertColors(&self) -> bool;
    }
);

extern_methods!(
    /// NSWorkspaceAccessibility
    #[cfg(feature = "AppKit_NSWorkspace")]
    unsafe impl NSWorkspace {
        #[method(isVoiceOverEnabled)]
        pub unsafe fn isVoiceOverEnabled(&self) -> bool;

        #[method(isSwitchControlEnabled)]
        pub unsafe fn isSwitchControlEnabled(&self) -> bool;
    }
);

extern_static!(
    NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification: &'static NSNotificationName
);

extern_fn!(
    #[cfg(feature = "AppKit_NSView")]
    pub unsafe fn NSAccessibilityFrameInView(parent_view: &NSView, frame: NSRect) -> NSRect;
);

extern_fn!(
    #[cfg(feature = "AppKit_NSView")]
    pub unsafe fn NSAccessibilityPointInView(parent_view: &NSView, point: NSPoint) -> NSPoint;
);

extern_fn!(
    pub unsafe fn NSAccessibilitySetMayContainProtectedContent(flag: Bool) -> Bool;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityRoleDescription(
        role: &NSAccessibilityRole,
        subrole: Option<&NSAccessibilitySubrole>,
    ) -> *mut NSString;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityRoleDescriptionForUIElement(element: &AnyObject) -> *mut NSString;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSString")]
    pub unsafe fn NSAccessibilityActionDescription(
        action: &NSAccessibilityActionName,
    ) -> *mut NSString;
);

extern_fn!(
    #[deprecated = "Exceptions are no longer appropriate for indicating errors in accessibility API. Unexpected values should be handled through appropriate type checking."]
    pub unsafe fn NSAccessibilityRaiseBadArgumentException(
        element: Option<&AnyObject>,
        attribute: Option<&NSAccessibilityAttributeName>,
        value: Option<&AnyObject>,
    );
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredAncestor(element: &AnyObject) -> *mut AnyObject;
);

extern_fn!(
    pub unsafe fn NSAccessibilityUnignoredDescendant(element: &AnyObject) -> *mut AnyObject;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSArray")]
    pub unsafe fn NSAccessibilityUnignoredChildren(original_children: &NSArray)
        -> NonNull<NSArray>;
);

extern_fn!(
    #[cfg(feature = "Foundation_NSArray")]
    pub unsafe fn NSAccessibilityUnignoredChildrenForOnlyChild(
        original_child: &AnyObject,
    ) -> NonNull<NSArray>;
);

extern_fn!(
    pub unsafe fn NSAccessibilityPostNotification(
        element: &AnyObject,
        notification: &NSAccessibilityNotificationName,
    );
);
