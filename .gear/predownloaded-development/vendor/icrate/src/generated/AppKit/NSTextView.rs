//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSelectionGranularity {
        NSSelectByCharacter = 0,
        NSSelectByWord = 1,
        NSSelectByParagraph = 2,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSSelectionAffinity {
        NSSelectionAffinityUpstream = 0,
        NSSelectionAffinityDownstream = 1,
    }
);

extern_static!(NSAllRomanInputSourcesLocaleIdentifier: &'static NSString);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSTextView")]
    pub struct NSTextView;

    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl ClassType for NSTextView {
        #[inherits(NSView, NSResponder, NSObject)]
        type Super = NSText;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAccessibility for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAccessibilityElementProtocol for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAccessibilityNavigableStaticText for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAccessibilityStaticText for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAnimatablePropertyContainer for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSAppearanceCustomization for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSChangeSpelling for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSCoding for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSColorChanging for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSDraggingDestination for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSDraggingSource for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSIgnoreMisspelledWords for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSMenuItemValidation for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSObjectProtocol for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSStandardKeyBindingResponding for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSTextContent for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSTextInput for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSTextInputClient for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSTextLayoutOrientationProvider for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSUserInterfaceItemIdentification for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSUserInterfaceValidations for NSTextView {}

extern_methods!(
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method_id(@__retain_semantics Init initWithFrame:textContainer:)]
        pub unsafe fn initWithFrame_textContainer(
            this: Option<Allocated<Self>>,
            frame_rect: NSRect,
            container: Option<&NSTextContainer>,
        ) -> Id<Self>;

        #[cfg(feature = "Foundation_NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Option<Allocated<Self>>,
            coder: &NSCoder,
        ) -> Option<Id<Self>>;

        #[method_id(@__retain_semantics Init initWithFrame:)]
        pub unsafe fn initWithFrame(this: Option<Allocated<Self>>, frame_rect: NSRect) -> Id<Self>;

        #[method_id(@__retain_semantics Init initUsingTextLayoutManager:)]
        pub unsafe fn initUsingTextLayoutManager(
            this: Option<Allocated<Self>>,
            using_text_layout_manager: bool,
        ) -> Id<Self>;

        #[method_id(@__retain_semantics Other textViewUsingTextLayoutManager:)]
        pub unsafe fn textViewUsingTextLayoutManager(using_text_layout_manager: bool) -> Id<Self>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method_id(@__retain_semantics Other textContainer)]
        pub unsafe fn textContainer(&self) -> Option<Id<NSTextContainer>>;

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(setTextContainer:)]
        pub unsafe fn setTextContainer(&self, text_container: Option<&NSTextContainer>);

        #[cfg(feature = "AppKit_NSTextContainer")]
        #[method(replaceTextContainer:)]
        pub unsafe fn replaceTextContainer(&self, new_container: &NSTextContainer);

        #[method(textContainerInset)]
        pub unsafe fn textContainerInset(&self) -> NSSize;

        #[method(setTextContainerInset:)]
        pub unsafe fn setTextContainerInset(&self, text_container_inset: NSSize);

        #[method(textContainerOrigin)]
        pub unsafe fn textContainerOrigin(&self) -> NSPoint;

        #[method(invalidateTextContainerOrigin)]
        pub unsafe fn invalidateTextContainerOrigin(&self);

        #[cfg(feature = "AppKit_NSLayoutManager")]
        #[method_id(@__retain_semantics Other layoutManager)]
        pub unsafe fn layoutManager(&self) -> Option<Id<NSLayoutManager>>;

        #[cfg(feature = "AppKit_NSTextStorage")]
        #[method_id(@__retain_semantics Other textStorage)]
        pub unsafe fn textStorage(&self) -> Option<Id<NSTextStorage>>;

        #[cfg(feature = "AppKit_NSTextLayoutManager")]
        #[method_id(@__retain_semantics Other textLayoutManager)]
        pub unsafe fn textLayoutManager(&self) -> Option<Id<NSTextLayoutManager>>;

        #[cfg(feature = "AppKit_NSTextContentStorage")]
        #[method_id(@__retain_semantics Other textContentStorage)]
        pub unsafe fn textContentStorage(&self) -> Option<Id<NSTextContentStorage>>;

        #[deprecated = "Use -insertText:replacementRange: from NSTextInputClient instead. Since the method is designed to be used solely by the input system, the message should never be sent to a text view from applications. Any content modifications should be via either NSTextStorage or NSText methods."]
        #[method(insertText:)]
        pub unsafe fn insertText(&self, insert_string: &AnyObject);

        #[method(setConstrainedFrameSize:)]
        pub unsafe fn setConstrainedFrameSize(&self, desired_size: NSSize);

        #[method(setAlignment:range:)]
        pub unsafe fn setAlignment_range(&self, alignment: NSTextAlignment, range: NSRange);

        #[method(setBaseWritingDirection:range:)]
        pub unsafe fn setBaseWritingDirection_range(
            &self,
            writing_direction: NSWritingDirection,
            range: NSRange,
        );

        #[method(turnOffKerning:)]
        pub unsafe fn turnOffKerning(&self, sender: Option<&AnyObject>);

        #[method(tightenKerning:)]
        pub unsafe fn tightenKerning(&self, sender: Option<&AnyObject>);

        #[method(loosenKerning:)]
        pub unsafe fn loosenKerning(&self, sender: Option<&AnyObject>);

        #[method(useStandardKerning:)]
        pub unsafe fn useStandardKerning(&self, sender: Option<&AnyObject>);

        #[method(turnOffLigatures:)]
        pub unsafe fn turnOffLigatures(&self, sender: Option<&AnyObject>);

        #[method(useStandardLigatures:)]
        pub unsafe fn useStandardLigatures(&self, sender: Option<&AnyObject>);

        #[method(useAllLigatures:)]
        pub unsafe fn useAllLigatures(&self, sender: Option<&AnyObject>);

        #[method(raiseBaseline:)]
        pub unsafe fn raiseBaseline(&self, sender: Option<&AnyObject>);

        #[method(lowerBaseline:)]
        pub unsafe fn lowerBaseline(&self, sender: Option<&AnyObject>);

        #[deprecated = "Use the traditional shaped characters encoded in the Unicode standard. Access the characters via the character palette."]
        #[method(toggleTraditionalCharacterShape:)]
        pub unsafe fn toggleTraditionalCharacterShape(&self, sender: Option<&AnyObject>);

        #[method(outline:)]
        pub unsafe fn outline(&self, sender: Option<&AnyObject>);

        #[method(performFindPanelAction:)]
        pub unsafe fn performFindPanelAction(&self, sender: Option<&AnyObject>);

        #[method(alignJustified:)]
        pub unsafe fn alignJustified(&self, sender: Option<&AnyObject>);

        #[method(changeColor:)]
        pub unsafe fn changeColor(&self, sender: Option<&AnyObject>);

        #[method(changeAttributes:)]
        pub unsafe fn changeAttributes(&self, sender: Option<&AnyObject>);

        #[method(changeDocumentBackgroundColor:)]
        pub unsafe fn changeDocumentBackgroundColor(&self, sender: Option<&AnyObject>);

        #[method(orderFrontSpacingPanel:)]
        pub unsafe fn orderFrontSpacingPanel(&self, sender: Option<&AnyObject>);

        #[method(orderFrontLinkPanel:)]
        pub unsafe fn orderFrontLinkPanel(&self, sender: Option<&AnyObject>);

        #[method(orderFrontListPanel:)]
        pub unsafe fn orderFrontListPanel(&self, sender: Option<&AnyObject>);

        #[method(orderFrontTablePanel:)]
        pub unsafe fn orderFrontTablePanel(&self, sender: Option<&AnyObject>);

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didMoveMarker:)]
        pub unsafe fn rulerView_didMoveMarker(&self, ruler: &NSRulerView, marker: &NSRulerMarker);

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didRemoveMarker:)]
        pub unsafe fn rulerView_didRemoveMarker(&self, ruler: &NSRulerView, marker: &NSRulerMarker);

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:didAddMarker:)]
        pub unsafe fn rulerView_didAddMarker(&self, ruler: &NSRulerView, marker: &NSRulerMarker);

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldMoveMarker:)]
        pub unsafe fn rulerView_shouldMoveMarker(
            &self,
            ruler: &NSRulerView,
            marker: &NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldAddMarker:)]
        pub unsafe fn rulerView_shouldAddMarker(
            &self,
            ruler: &NSRulerView,
            marker: &NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:willMoveMarker:toLocation:)]
        pub unsafe fn rulerView_willMoveMarker_toLocation(
            &self,
            ruler: &NSRulerView,
            marker: &NSRulerMarker,
            location: CGFloat,
        ) -> CGFloat;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:shouldRemoveMarker:)]
        pub unsafe fn rulerView_shouldRemoveMarker(
            &self,
            ruler: &NSRulerView,
            marker: &NSRulerMarker,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSRulerMarker", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:willAddMarker:atLocation:)]
        pub unsafe fn rulerView_willAddMarker_atLocation(
            &self,
            ruler: &NSRulerView,
            marker: &NSRulerMarker,
            location: CGFloat,
        ) -> CGFloat;

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSRulerView"))]
        #[method(rulerView:handleMouseDown:)]
        pub unsafe fn rulerView_handleMouseDown(&self, ruler: &NSRulerView, event: &NSEvent);

        #[method(setNeedsDisplayInRect:avoidAdditionalLayout:)]
        pub unsafe fn setNeedsDisplayInRect_avoidAdditionalLayout(&self, rect: NSRect, flag: bool);

        #[method(shouldDrawInsertionPoint)]
        pub unsafe fn shouldDrawInsertionPoint(&self) -> bool;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(drawInsertionPointInRect:color:turnedOn:)]
        pub unsafe fn drawInsertionPointInRect_color_turnedOn(
            &self,
            rect: NSRect,
            color: &NSColor,
            flag: bool,
        );

        #[method(drawViewBackgroundInRect:)]
        pub unsafe fn drawViewBackgroundInRect(&self, rect: NSRect);

        #[method(updateRuler)]
        pub unsafe fn updateRuler(&self);

        #[method(updateFontPanel)]
        pub unsafe fn updateFontPanel(&self);

        #[method(updateDragTypeRegistration)]
        pub unsafe fn updateDragTypeRegistration(&self);

        #[method(selectionRangeForProposedRange:granularity:)]
        pub unsafe fn selectionRangeForProposedRange_granularity(
            &self,
            proposed_char_range: NSRange,
            granularity: NSSelectionGranularity,
        ) -> NSRange;

        #[method(clickedOnLink:atIndex:)]
        pub unsafe fn clickedOnLink_atIndex(&self, link: &AnyObject, char_index: NSUInteger);

        #[method(startSpeaking:)]
        pub unsafe fn startSpeaking(&self, sender: Option<&AnyObject>);

        #[method(stopSpeaking:)]
        pub unsafe fn stopSpeaking(&self, sender: Option<&AnyObject>);

        #[method(setLayoutOrientation:)]
        pub unsafe fn setLayoutOrientation(&self, orientation: NSTextLayoutOrientation);

        #[method(changeLayoutOrientation:)]
        pub unsafe fn changeLayoutOrientation(&self, sender: Option<&AnyObject>);

        #[method(characterIndexForInsertionAtPoint:)]
        pub unsafe fn characterIndexForInsertionAtPoint(&self, point: NSPoint) -> NSUInteger;

        #[method(stronglyReferencesTextStorage)]
        pub unsafe fn stronglyReferencesTextStorage() -> bool;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[method(performValidatedReplacementInRange:withAttributedString:)]
        pub unsafe fn performValidatedReplacementInRange_withAttributedString(
            &self,
            range: NSRange,
            attributed_string: &NSAttributedString,
        ) -> bool;

        #[method(usesAdaptiveColorMappingForDarkAppearance)]
        pub unsafe fn usesAdaptiveColorMappingForDarkAppearance(&self) -> bool;

        #[method(setUsesAdaptiveColorMappingForDarkAppearance:)]
        pub unsafe fn setUsesAdaptiveColorMappingForDarkAppearance(
            &self,
            uses_adaptive_color_mapping_for_dark_appearance: bool,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSResponder`
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);

extern_methods!(
    /// NSCompletion
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(complete:)]
        pub unsafe fn complete(&self, sender: Option<&AnyObject>);

        #[method(rangeForUserCompletion)]
        pub unsafe fn rangeForUserCompletion(&self) -> NSRange;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other completionsForPartialWordRange:indexOfSelectedItem:)]
        pub unsafe fn completionsForPartialWordRange_indexOfSelectedItem(
            &self,
            char_range: NSRange,
            index: NonNull<NSInteger>,
        ) -> Option<Id<NSArray<NSString>>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(insertCompletion:forPartialWordRange:movement:isFinal:)]
        pub unsafe fn insertCompletion_forPartialWordRange_movement_isFinal(
            &self,
            word: &NSString,
            char_range: NSRange,
            movement: NSInteger,
            flag: bool,
        );
    }
);

extern_methods!(
    /// NSPasteboard
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other writablePasteboardTypes)]
        pub unsafe fn writablePasteboardTypes(&self) -> Id<NSArray<NSPasteboardType>>;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(writeSelectionToPasteboard:type:)]
        pub unsafe fn writeSelectionToPasteboard_type(
            &self,
            pboard: &NSPasteboard,
            r#type: &NSPasteboardType,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSPasteboard", feature = "Foundation_NSArray"))]
        #[method(writeSelectionToPasteboard:types:)]
        pub unsafe fn writeSelectionToPasteboard_types(
            &self,
            pboard: &NSPasteboard,
            types: &NSArray<NSPasteboardType>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other readablePasteboardTypes)]
        pub unsafe fn readablePasteboardTypes(&self) -> Id<NSArray<NSPasteboardType>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other preferredPasteboardTypeFromArray:restrictedToTypesFromArray:)]
        pub unsafe fn preferredPasteboardTypeFromArray_restrictedToTypesFromArray(
            &self,
            available_types: &NSArray<NSPasteboardType>,
            allowed_types: Option<&NSArray<NSPasteboardType>>,
        ) -> Option<Id<NSPasteboardType>>;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(readSelectionFromPasteboard:type:)]
        pub unsafe fn readSelectionFromPasteboard_type(
            &self,
            pboard: &NSPasteboard,
            r#type: &NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "AppKit_NSPasteboard")]
        #[method(readSelectionFromPasteboard:)]
        pub unsafe fn readSelectionFromPasteboard(&self, pboard: &NSPasteboard) -> bool;

        #[method(registerForServices)]
        pub unsafe fn registerForServices();

        #[method_id(@__retain_semantics Other validRequestorForSendType:returnType:)]
        pub unsafe fn validRequestorForSendType_returnType(
            &self,
            send_type: Option<&NSPasteboardType>,
            return_type: Option<&NSPasteboardType>,
        ) -> Option<Id<AnyObject>>;

        #[method(pasteAsPlainText:)]
        pub unsafe fn pasteAsPlainText(&self, sender: Option<&AnyObject>);

        #[method(pasteAsRichText:)]
        pub unsafe fn pasteAsRichText(&self, sender: Option<&AnyObject>);
    }
);

extern_methods!(
    /// NSDragging
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSEvent")]
        #[method(dragSelectionWithEvent:offset:slideBack:)]
        pub unsafe fn dragSelectionWithEvent_offset_slideBack(
            &self,
            event: &NSEvent,
            mouse_offset: NSSize,
            slide_back: bool,
        ) -> bool;

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSImage"))]
        #[method_id(@__retain_semantics Other dragImageForSelectionWithEvent:origin:)]
        pub unsafe fn dragImageForSelectionWithEvent_origin(
            &self,
            event: &NSEvent,
            origin: NSPointPointer,
        ) -> Option<Id<NSImage>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[method_id(@__retain_semantics Other acceptableDragTypes)]
        pub unsafe fn acceptableDragTypes(&self) -> Id<NSArray<NSPasteboardType>>;

        #[method(dragOperationForDraggingInfo:type:)]
        pub unsafe fn dragOperationForDraggingInfo_type(
            &self,
            drag_info: &ProtocolObject<dyn NSDraggingInfo>,
            r#type: &NSPasteboardType,
        ) -> NSDragOperation;

        #[method(cleanUpAfterDragOperation)]
        pub unsafe fn cleanUpAfterDragOperation(&self);
    }
);

extern_methods!(
    /// NSSharing
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other selectedRanges)]
        pub unsafe fn selectedRanges(&self) -> Id<NSArray<NSValue>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method(setSelectedRanges:)]
        pub unsafe fn setSelectedRanges(&self, selected_ranges: &NSArray<NSValue>);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method(setSelectedRanges:affinity:stillSelecting:)]
        pub unsafe fn setSelectedRanges_affinity_stillSelecting(
            &self,
            ranges: &NSArray<NSValue>,
            affinity: NSSelectionAffinity,
            still_selecting_flag: bool,
        );

        #[method(setSelectedRange:affinity:stillSelecting:)]
        pub unsafe fn setSelectedRange_affinity_stillSelecting(
            &self,
            char_range: NSRange,
            affinity: NSSelectionAffinity,
            still_selecting_flag: bool,
        );

        #[method(selectionAffinity)]
        pub unsafe fn selectionAffinity(&self) -> NSSelectionAffinity;

        #[method(selectionGranularity)]
        pub unsafe fn selectionGranularity(&self) -> NSSelectionGranularity;

        #[method(setSelectionGranularity:)]
        pub unsafe fn setSelectionGranularity(&self, selection_granularity: NSSelectionGranularity);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other selectedTextAttributes)]
        pub unsafe fn selectedTextAttributes(
            &self,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setSelectedTextAttributes:)]
        pub unsafe fn setSelectedTextAttributes(
            &self,
            selected_text_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other insertionPointColor)]
        pub unsafe fn insertionPointColor(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setInsertionPointColor:)]
        pub unsafe fn setInsertionPointColor(&self, insertion_point_color: &NSColor);

        #[method(updateInsertionPointStateAndRestartTimer:)]
        pub unsafe fn updateInsertionPointStateAndRestartTimer(&self, restart_flag: bool);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other markedTextAttributes)]
        pub unsafe fn markedTextAttributes(
            &self,
        ) -> Option<Id<NSDictionary<NSAttributedStringKey, AnyObject>>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setMarkedTextAttributes:)]
        pub unsafe fn setMarkedTextAttributes(
            &self,
            marked_text_attributes: Option<&NSDictionary<NSAttributedStringKey, AnyObject>>,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other linkTextAttributes)]
        pub unsafe fn linkTextAttributes(
            &self,
        ) -> Option<Id<NSDictionary<NSAttributedStringKey, AnyObject>>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setLinkTextAttributes:)]
        pub unsafe fn setLinkTextAttributes(
            &self,
            link_text_attributes: Option<&NSDictionary<NSAttributedStringKey, AnyObject>>,
        );

        #[method(displaysLinkToolTips)]
        pub unsafe fn displaysLinkToolTips(&self) -> bool;

        #[method(setDisplaysLinkToolTips:)]
        pub unsafe fn setDisplaysLinkToolTips(&self, displays_link_tool_tips: bool);

        #[method(acceptsGlyphInfo)]
        pub unsafe fn acceptsGlyphInfo(&self) -> bool;

        #[method(setAcceptsGlyphInfo:)]
        pub unsafe fn setAcceptsGlyphInfo(&self, accepts_glyph_info: bool);

        #[method(usesRuler)]
        pub unsafe fn usesRuler(&self) -> bool;

        #[method(setUsesRuler:)]
        pub unsafe fn setUsesRuler(&self, uses_ruler: bool);

        #[method(usesInspectorBar)]
        pub unsafe fn usesInspectorBar(&self) -> bool;

        #[method(setUsesInspectorBar:)]
        pub unsafe fn setUsesInspectorBar(&self, uses_inspector_bar: bool);

        #[method(isContinuousSpellCheckingEnabled)]
        pub unsafe fn isContinuousSpellCheckingEnabled(&self) -> bool;

        #[method(setContinuousSpellCheckingEnabled:)]
        pub unsafe fn setContinuousSpellCheckingEnabled(
            &self,
            continuous_spell_checking_enabled: bool,
        );

        #[method(toggleContinuousSpellChecking:)]
        pub unsafe fn toggleContinuousSpellChecking(&self, sender: Option<&AnyObject>);

        #[method(spellCheckerDocumentTag)]
        pub unsafe fn spellCheckerDocumentTag(&self) -> NSInteger;

        #[method(isGrammarCheckingEnabled)]
        pub unsafe fn isGrammarCheckingEnabled(&self) -> bool;

        #[method(setGrammarCheckingEnabled:)]
        pub unsafe fn setGrammarCheckingEnabled(&self, grammar_checking_enabled: bool);

        #[method(toggleGrammarChecking:)]
        pub unsafe fn toggleGrammarChecking(&self, sender: Option<&AnyObject>);

        #[method(setSpellingState:range:)]
        pub unsafe fn setSpellingState_range(&self, value: NSInteger, char_range: NSRange);

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method_id(@__retain_semantics Other typingAttributes)]
        pub unsafe fn typingAttributes(&self)
            -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(setTypingAttributes:)]
        pub unsafe fn setTypingAttributes(
            &self,
            typing_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Foundation_NSValue"
        ))]
        #[method(shouldChangeTextInRanges:replacementStrings:)]
        pub unsafe fn shouldChangeTextInRanges_replacementStrings(
            &self,
            affected_ranges: &NSArray<NSValue>,
            replacement_strings: Option<&NSArray<NSString>>,
        ) -> bool;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserTextChange)]
        pub unsafe fn rangesForUserTextChange(&self) -> Option<Id<NSArray<NSValue>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserCharacterAttributeChange)]
        pub unsafe fn rangesForUserCharacterAttributeChange(&self) -> Option<Id<NSArray<NSValue>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSValue"))]
        #[method_id(@__retain_semantics Other rangesForUserParagraphAttributeChange)]
        pub unsafe fn rangesForUserParagraphAttributeChange(&self) -> Option<Id<NSArray<NSValue>>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(shouldChangeTextInRange:replacementString:)]
        pub unsafe fn shouldChangeTextInRange_replacementString(
            &self,
            affected_char_range: NSRange,
            replacement_string: Option<&NSString>,
        ) -> bool;

        #[method(didChangeText)]
        pub unsafe fn didChangeText(&self);

        #[method(rangeForUserTextChange)]
        pub unsafe fn rangeForUserTextChange(&self) -> NSRange;

        #[method(rangeForUserCharacterAttributeChange)]
        pub unsafe fn rangeForUserCharacterAttributeChange(&self) -> NSRange;

        #[method(rangeForUserParagraphAttributeChange)]
        pub unsafe fn rangeForUserParagraphAttributeChange(&self) -> NSRange;

        #[method(allowsDocumentBackgroundColorChange)]
        pub unsafe fn allowsDocumentBackgroundColorChange(&self) -> bool;

        #[method(setAllowsDocumentBackgroundColorChange:)]
        pub unsafe fn setAllowsDocumentBackgroundColorChange(
            &self,
            allows_document_background_color_change: bool,
        );

        #[cfg(feature = "AppKit_NSParagraphStyle")]
        #[method_id(@__retain_semantics Other defaultParagraphStyle)]
        pub unsafe fn defaultParagraphStyle(&self) -> Option<Id<NSParagraphStyle>>;

        #[cfg(feature = "AppKit_NSParagraphStyle")]
        #[method(setDefaultParagraphStyle:)]
        pub unsafe fn setDefaultParagraphStyle(
            &self,
            default_paragraph_style: Option<&NSParagraphStyle>,
        );

        #[method(allowsUndo)]
        pub unsafe fn allowsUndo(&self) -> bool;

        #[method(setAllowsUndo:)]
        pub unsafe fn setAllowsUndo(&self, allows_undo: bool);

        #[method(breakUndoCoalescing)]
        pub unsafe fn breakUndoCoalescing(&self);

        #[method(isCoalescingUndo)]
        pub unsafe fn isCoalescingUndo(&self) -> bool;

        #[method(allowsImageEditing)]
        pub unsafe fn allowsImageEditing(&self) -> bool;

        #[method(setAllowsImageEditing:)]
        pub unsafe fn setAllowsImageEditing(&self, allows_image_editing: bool);

        #[method(showFindIndicatorForRange:)]
        pub unsafe fn showFindIndicatorForRange(&self, char_range: NSRange);

        #[method(usesRolloverButtonForSelection)]
        pub unsafe fn usesRolloverButtonForSelection(&self) -> bool;

        #[method(setUsesRolloverButtonForSelection:)]
        pub unsafe fn setUsesRolloverButtonForSelection(
            &self,
            uses_rollover_button_for_selection: bool,
        );

        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(&self) -> Option<Id<ProtocolObject<dyn NSTextViewDelegate>>>;

        #[method(setDelegate:)]
        pub unsafe fn setDelegate(&self, delegate: Option<&ProtocolObject<dyn NSTextViewDelegate>>);

        #[method(isEditable)]
        pub unsafe fn isEditable(&self) -> bool;

        #[method(setEditable:)]
        pub unsafe fn setEditable(&self, editable: bool);

        #[method(isSelectable)]
        pub unsafe fn isSelectable(&self) -> bool;

        #[method(setSelectable:)]
        pub unsafe fn setSelectable(&self, selectable: bool);

        #[method(isRichText)]
        pub unsafe fn isRichText(&self) -> bool;

        #[method(setRichText:)]
        pub unsafe fn setRichText(&self, rich_text: bool);

        #[method(importsGraphics)]
        pub unsafe fn importsGraphics(&self) -> bool;

        #[method(setImportsGraphics:)]
        pub unsafe fn setImportsGraphics(&self, imports_graphics: bool);

        #[method(drawsBackground)]
        pub unsafe fn drawsBackground(&self) -> bool;

        #[method(setDrawsBackground:)]
        pub unsafe fn setDrawsBackground(&self, draws_background: bool);

        #[cfg(feature = "AppKit_NSColor")]
        #[method_id(@__retain_semantics Other backgroundColor)]
        pub unsafe fn backgroundColor(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        #[method(setBackgroundColor:)]
        pub unsafe fn setBackgroundColor(&self, background_color: &NSColor);

        #[method(isFieldEditor)]
        pub unsafe fn isFieldEditor(&self) -> bool;

        #[method(setFieldEditor:)]
        pub unsafe fn setFieldEditor(&self, field_editor: bool);

        #[method(usesFontPanel)]
        pub unsafe fn usesFontPanel(&self) -> bool;

        #[method(setUsesFontPanel:)]
        pub unsafe fn setUsesFontPanel(&self, uses_font_panel: bool);

        #[method(isRulerVisible)]
        pub unsafe fn isRulerVisible(&self) -> bool;

        #[method(setRulerVisible:)]
        pub unsafe fn setRulerVisible(&self, ruler_visible: bool);

        #[method(setSelectedRange:)]
        pub unsafe fn setSelectedRange(&self, char_range: NSRange);

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method_id(@__retain_semantics Other allowedInputSourceLocales)]
        pub unsafe fn allowedInputSourceLocales(&self) -> Option<Id<NSArray<NSString>>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[method(setAllowedInputSourceLocales:)]
        pub unsafe fn setAllowedInputSourceLocales(
            &self,
            allowed_input_source_locales: Option<&NSArray<NSString>>,
        );
    }
);

extern_methods!(
    /// NSTextChecking
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(smartInsertDeleteEnabled)]
        pub unsafe fn smartInsertDeleteEnabled(&self) -> bool;

        #[method(setSmartInsertDeleteEnabled:)]
        pub unsafe fn setSmartInsertDeleteEnabled(&self, smart_insert_delete_enabled: bool);

        #[method(smartDeleteRangeForProposedRange:)]
        pub unsafe fn smartDeleteRangeForProposedRange(
            &self,
            proposed_char_range: NSRange,
        ) -> NSRange;

        #[method(toggleSmartInsertDelete:)]
        pub unsafe fn toggleSmartInsertDelete(&self, sender: Option<&AnyObject>);

        #[cfg(feature = "Foundation_NSString")]
        #[method(smartInsertForString:replacingRange:beforeString:afterString:)]
        pub unsafe fn smartInsertForString_replacingRange_beforeString_afterString(
            &self,
            paste_string: &NSString,
            char_range_to_replace: NSRange,
            before_string: Option<&mut Option<Id<NSString>>>,
            after_string: Option<&mut Option<Id<NSString>>>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other smartInsertBeforeStringForString:replacingRange:)]
        pub unsafe fn smartInsertBeforeStringForString_replacingRange(
            &self,
            paste_string: &NSString,
            char_range_to_replace: NSRange,
        ) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other smartInsertAfterStringForString:replacingRange:)]
        pub unsafe fn smartInsertAfterStringForString_replacingRange(
            &self,
            paste_string: &NSString,
            char_range_to_replace: NSRange,
        ) -> Option<Id<NSString>>;

        #[method(isAutomaticQuoteSubstitutionEnabled)]
        pub unsafe fn isAutomaticQuoteSubstitutionEnabled(&self) -> bool;

        #[method(setAutomaticQuoteSubstitutionEnabled:)]
        pub unsafe fn setAutomaticQuoteSubstitutionEnabled(
            &self,
            automatic_quote_substitution_enabled: bool,
        );

        #[method(toggleAutomaticQuoteSubstitution:)]
        pub unsafe fn toggleAutomaticQuoteSubstitution(&self, sender: Option<&AnyObject>);

        #[method(isAutomaticLinkDetectionEnabled)]
        pub unsafe fn isAutomaticLinkDetectionEnabled(&self) -> bool;

        #[method(setAutomaticLinkDetectionEnabled:)]
        pub unsafe fn setAutomaticLinkDetectionEnabled(
            &self,
            automatic_link_detection_enabled: bool,
        );

        #[method(toggleAutomaticLinkDetection:)]
        pub unsafe fn toggleAutomaticLinkDetection(&self, sender: Option<&AnyObject>);

        #[method(isAutomaticDataDetectionEnabled)]
        pub unsafe fn isAutomaticDataDetectionEnabled(&self) -> bool;

        #[method(setAutomaticDataDetectionEnabled:)]
        pub unsafe fn setAutomaticDataDetectionEnabled(
            &self,
            automatic_data_detection_enabled: bool,
        );

        #[method(toggleAutomaticDataDetection:)]
        pub unsafe fn toggleAutomaticDataDetection(&self, sender: Option<&AnyObject>);

        #[method(isAutomaticDashSubstitutionEnabled)]
        pub unsafe fn isAutomaticDashSubstitutionEnabled(&self) -> bool;

        #[method(setAutomaticDashSubstitutionEnabled:)]
        pub unsafe fn setAutomaticDashSubstitutionEnabled(
            &self,
            automatic_dash_substitution_enabled: bool,
        );

        #[method(toggleAutomaticDashSubstitution:)]
        pub unsafe fn toggleAutomaticDashSubstitution(&self, sender: Option<&AnyObject>);

        #[method(isAutomaticTextReplacementEnabled)]
        pub unsafe fn isAutomaticTextReplacementEnabled(&self) -> bool;

        #[method(setAutomaticTextReplacementEnabled:)]
        pub unsafe fn setAutomaticTextReplacementEnabled(
            &self,
            automatic_text_replacement_enabled: bool,
        );

        #[method(toggleAutomaticTextReplacement:)]
        pub unsafe fn toggleAutomaticTextReplacement(&self, sender: Option<&AnyObject>);

        #[method(isAutomaticSpellingCorrectionEnabled)]
        pub unsafe fn isAutomaticSpellingCorrectionEnabled(&self) -> bool;

        #[method(setAutomaticSpellingCorrectionEnabled:)]
        pub unsafe fn setAutomaticSpellingCorrectionEnabled(
            &self,
            automatic_spelling_correction_enabled: bool,
        );

        #[method(toggleAutomaticSpellingCorrection:)]
        pub unsafe fn toggleAutomaticSpellingCorrection(&self, sender: Option<&AnyObject>);

        #[method(enabledTextCheckingTypes)]
        pub unsafe fn enabledTextCheckingTypes(&self) -> NSTextCheckingTypes;

        #[method(setEnabledTextCheckingTypes:)]
        pub unsafe fn setEnabledTextCheckingTypes(
            &self,
            enabled_text_checking_types: NSTextCheckingTypes,
        );

        #[cfg(feature = "Foundation_NSDictionary")]
        #[method(checkTextInRange:types:options:)]
        pub unsafe fn checkTextInRange_types_options(
            &self,
            range: NSRange,
            checking_types: NSTextCheckingTypes,
            options: &NSDictionary<NSTextCheckingOptionKey, AnyObject>,
        );

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSOrthography",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[method(handleTextCheckingResults:forRange:types:options:orthography:wordCount:)]
        pub unsafe fn handleTextCheckingResults_forRange_types_options_orthography_wordCount(
            &self,
            results: &NSArray<NSTextCheckingResult>,
            range: NSRange,
            checking_types: NSTextCheckingTypes,
            options: &NSDictionary<NSTextCheckingOptionKey, AnyObject>,
            orthography: &NSOrthography,
            word_count: NSInteger,
        );

        #[method(orderFrontSubstitutionsPanel:)]
        pub unsafe fn orderFrontSubstitutionsPanel(&self, sender: Option<&AnyObject>);

        #[method(checkTextInSelection:)]
        pub unsafe fn checkTextInSelection(&self, sender: Option<&AnyObject>);

        #[method(checkTextInDocument:)]
        pub unsafe fn checkTextInDocument(&self, sender: Option<&AnyObject>);

        #[method(usesFindPanel)]
        pub unsafe fn usesFindPanel(&self) -> bool;

        #[method(setUsesFindPanel:)]
        pub unsafe fn setUsesFindPanel(&self, uses_find_panel: bool);

        #[method(usesFindBar)]
        pub unsafe fn usesFindBar(&self) -> bool;

        #[method(setUsesFindBar:)]
        pub unsafe fn setUsesFindBar(&self, uses_find_bar: bool);

        #[method(isIncrementalSearchingEnabled)]
        pub unsafe fn isIncrementalSearchingEnabled(&self) -> bool;

        #[method(setIncrementalSearchingEnabled:)]
        pub unsafe fn setIncrementalSearchingEnabled(&self, incremental_searching_enabled: bool);
    }
);

extern_methods!(
    /// NSQuickLookPreview
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(toggleQuickLookPreviewPanel:)]
        pub unsafe fn toggleQuickLookPreviewPanel(&self, sender: Option<&AnyObject>);

        #[method(updateQuickLookPreviewPanel)]
        pub unsafe fn updateQuickLookPreviewPanel(&self);
    }
);

extern_methods!(
    /// NSTextView_SharingService
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(orderFrontSharingServicePicker:)]
        pub unsafe fn orderFrontSharingServicePicker(&self, sender: Option<&AnyObject>);
    }
);

extern_methods!(
    /// NSTextView_TouchBar
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[method(isAutomaticTextCompletionEnabled)]
        pub unsafe fn isAutomaticTextCompletionEnabled(&self) -> bool;

        #[method(setAutomaticTextCompletionEnabled:)]
        pub unsafe fn setAutomaticTextCompletionEnabled(
            &self,
            automatic_text_completion_enabled: bool,
        );

        #[method(toggleAutomaticTextCompletion:)]
        pub unsafe fn toggleAutomaticTextCompletion(&self, sender: Option<&AnyObject>);

        #[method(allowsCharacterPickerTouchBarItem)]
        pub unsafe fn allowsCharacterPickerTouchBarItem(&self) -> bool;

        #[method(setAllowsCharacterPickerTouchBarItem:)]
        pub unsafe fn setAllowsCharacterPickerTouchBarItem(
            &self,
            allows_character_picker_touch_bar_item: bool,
        );

        #[method(updateTouchBarItemIdentifiers)]
        pub unsafe fn updateTouchBarItemIdentifiers(&self);

        #[method(updateTextTouchBarItems)]
        pub unsafe fn updateTextTouchBarItems(&self);

        #[method(updateCandidates)]
        pub unsafe fn updateCandidates(&self);

        #[cfg(feature = "AppKit_NSCandidateListTouchBarItem")]
        #[method_id(@__retain_semantics Other candidateListTouchBarItem)]
        pub unsafe fn candidateListTouchBarItem(&self) -> Option<Id<NSCandidateListTouchBarItem>>;
    }
);

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSCandidateListTouchBarItemDelegate for NSTextView {}

#[cfg(feature = "AppKit_NSTextView")]
unsafe impl NSTouchBarDelegate for NSTextView {}

extern_methods!(
    /// NSTextView_Factory
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollableTextView)]
        pub unsafe fn scrollableTextView() -> Id<NSScrollView>;

        #[method_id(@__retain_semantics Other fieldEditor)]
        pub unsafe fn fieldEditor() -> Id<Self>;

        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollableDocumentContentTextView)]
        pub unsafe fn scrollableDocumentContentTextView() -> Id<NSScrollView>;

        #[cfg(feature = "AppKit_NSScrollView")]
        #[method_id(@__retain_semantics Other scrollablePlainDocumentContentTextView)]
        pub unsafe fn scrollablePlainDocumentContentTextView() -> Id<NSScrollView>;
    }
);

extern_methods!(
    /// NSDeprecated
    #[cfg(feature = "AppKit_NSTextView")]
    unsafe impl NSTextView {
        #[deprecated = "Use NSResponder's makeBaseWritingDirectionNatural:, makeBaseWritingDirectionLeftToRight:, and makeBaseWritingDirectionRightToLeft: instead"]
        #[method(toggleBaseWritingDirection:)]
        pub unsafe fn toggleBaseWritingDirection(&self, sender: Option<&AnyObject>);
    }
);

extern_protocol!(
    pub unsafe trait NSTextViewDelegate: NSTextDelegate {
        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:clickedOnLink:atIndex:)]
        unsafe fn textView_clickedOnLink_atIndex(
            &self,
            text_view: &NSTextView,
            link: &AnyObject,
            char_index: NSUInteger,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:clickedOnCell:inRect:atIndex:)]
        unsafe fn textView_clickedOnCell_inRect_atIndex(
            &self,
            text_view: &NSTextView,
            cell: &ProtocolObject<dyn NSTextAttachmentCellProtocol>,
            cell_frame: NSRect,
            char_index: NSUInteger,
        );

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:doubleClickedOnCell:inRect:atIndex:)]
        unsafe fn textView_doubleClickedOnCell_inRect_atIndex(
            &self,
            text_view: &NSTextView,
            cell: &ProtocolObject<dyn NSTextAttachmentCellProtocol>,
            cell_frame: NSRect,
            char_index: NSUInteger,
        );

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSTextView"))]
        #[optional]
        #[method(textView:draggedCell:inRect:event:atIndex:)]
        unsafe fn textView_draggedCell_inRect_event_atIndex(
            &self,
            view: &NSTextView,
            cell: &ProtocolObject<dyn NSTextAttachmentCellProtocol>,
            rect: NSRect,
            event: &NSEvent,
            char_index: NSUInteger,
        );

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSArray"))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:writablePasteboardTypesForCell:atIndex:)]
        unsafe fn textView_writablePasteboardTypesForCell_atIndex(
            &self,
            view: &NSTextView,
            cell: &ProtocolObject<dyn NSTextAttachmentCellProtocol>,
            char_index: NSUInteger,
        ) -> Id<NSArray<NSPasteboardType>>;

        #[cfg(all(feature = "AppKit_NSPasteboard", feature = "AppKit_NSTextView"))]
        #[optional]
        #[method(textView:writeCell:atIndex:toPasteboard:type:)]
        unsafe fn textView_writeCell_atIndex_toPasteboard_type(
            &self,
            view: &NSTextView,
            cell: &ProtocolObject<dyn NSTextAttachmentCellProtocol>,
            char_index: NSUInteger,
            pboard: &NSPasteboard,
            r#type: &NSPasteboardType,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:willChangeSelectionFromCharacterRange:toCharacterRange:)]
        unsafe fn textView_willChangeSelectionFromCharacterRange_toCharacterRange(
            &self,
            text_view: &NSTextView,
            old_selected_char_range: NSRange,
            new_selected_char_range: NSRange,
        ) -> NSRange;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSValue"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:)]
        unsafe fn textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(
            &self,
            text_view: &NSTextView,
            old_selected_char_ranges: &NSArray<NSValue>,
            new_selected_char_ranges: &NSArray<NSValue>,
        ) -> Id<NSArray<NSValue>>;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString",
            feature = "Foundation_NSValue"
        ))]
        #[optional]
        #[method(textView:shouldChangeTextInRanges:replacementStrings:)]
        unsafe fn textView_shouldChangeTextInRanges_replacementStrings(
            &self,
            text_view: &NSTextView,
            affected_ranges: &NSArray<NSValue>,
            replacement_strings: Option<&NSArray<NSString>>,
        ) -> bool;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:shouldChangeTypingAttributes:toAttributes:)]
        unsafe fn textView_shouldChangeTypingAttributes_toAttributes(
            &self,
            text_view: &NSTextView,
            old_typing_attributes: &NSDictionary<NSString, AnyObject>,
            new_typing_attributes: &NSDictionary<NSAttributedStringKey, AnyObject>,
        ) -> Id<NSDictionary<NSAttributedStringKey, AnyObject>>;

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(textViewDidChangeSelection:)]
        unsafe fn textViewDidChangeSelection(&self, notification: &NSNotification);

        #[cfg(feature = "Foundation_NSNotification")]
        #[optional]
        #[method(textViewDidChangeTypingAttributes:)]
        unsafe fn textViewDidChangeTypingAttributes(&self, notification: &NSNotification);

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSString"))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:willDisplayToolTip:forCharacterAtIndex:)]
        unsafe fn textView_willDisplayToolTip_forCharacterAtIndex(
            &self,
            text_view: &NSTextView,
            tooltip: &NSString,
            character_index: NSUInteger,
        ) -> Option<Id<NSString>>;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSString"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:completions:forPartialWordRange:indexOfSelectedItem:)]
        unsafe fn textView_completions_forPartialWordRange_indexOfSelectedItem(
            &self,
            text_view: &NSTextView,
            words: &NSArray<NSString>,
            char_range: NSRange,
            index: *mut NSInteger,
        ) -> Id<NSArray<NSString>>;

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSString"))]
        #[optional]
        #[method(textView:shouldChangeTextInRange:replacementString:)]
        unsafe fn textView_shouldChangeTextInRange_replacementString(
            &self,
            text_view: &NSTextView,
            affected_char_range: NSRange,
            replacement_string: Option<&NSString>,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:doCommandBySelector:)]
        unsafe fn textView_doCommandBySelector(
            &self,
            text_view: &NSTextView,
            command_selector: Sel,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:shouldSetSpellingState:range:)]
        unsafe fn textView_shouldSetSpellingState_range(
            &self,
            text_view: &NSTextView,
            value: NSInteger,
            affected_char_range: NSRange,
        ) -> NSInteger;

        #[cfg(all(
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSMenu",
            feature = "AppKit_NSTextView"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:menu:forEvent:atIndex:)]
        unsafe fn textView_menu_forEvent_atIndex(
            &self,
            view: &NSTextView,
            menu: &NSMenu,
            event: &NSEvent,
            char_index: NSUInteger,
        ) -> Option<Id<NSMenu>>;

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSDictionary"))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:willCheckTextInRange:options:types:)]
        unsafe fn textView_willCheckTextInRange_options_types(
            &self,
            view: &NSTextView,
            range: NSRange,
            options: &NSDictionary<NSTextCheckingOptionKey, AnyObject>,
            checking_types: NonNull<NSTextCheckingTypes>,
        ) -> Id<NSDictionary<NSTextCheckingOptionKey, AnyObject>>;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSDictionary",
            feature = "Foundation_NSOrthography",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:didCheckTextInRange:types:options:results:orthography:wordCount:)]
        unsafe fn textView_didCheckTextInRange_types_options_results_orthography_wordCount(
            &self,
            view: &NSTextView,
            range: NSRange,
            checking_types: NSTextCheckingTypes,
            options: &NSDictionary<NSTextCheckingOptionKey, AnyObject>,
            results: &NSArray<NSTextCheckingResult>,
            orthography: &NSOrthography,
            word_count: NSInteger,
        ) -> Id<NSArray<NSTextCheckingResult>>;

        #[cfg(all(
            feature = "AppKit_NSTextAttachment",
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSURL"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:URLForContentsOfTextAttachment:atIndex:)]
        unsafe fn textView_URLForContentsOfTextAttachment_atIndex(
            &self,
            text_view: &NSTextView,
            text_attachment: &NSTextAttachment,
            char_index: NSUInteger,
        ) -> Option<Id<NSURL>>;

        #[cfg(all(
            feature = "AppKit_NSSharingServicePicker",
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:willShowSharingServicePicker:forItems:)]
        unsafe fn textView_willShowSharingServicePicker_forItems(
            &self,
            text_view: &NSTextView,
            service_picker: &NSSharingServicePicker,
            items: &NSArray,
        ) -> Option<Id<NSSharingServicePicker>>;

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSUndoManager"))]
        #[optional]
        #[method_id(@__retain_semantics Other undoManagerForTextView:)]
        unsafe fn undoManagerForTextView(&self, view: &NSTextView) -> Option<Id<NSUndoManager>>;

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSArray"))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:shouldUpdateTouchBarItemIdentifiers:)]
        unsafe fn textView_shouldUpdateTouchBarItemIdentifiers(
            &self,
            text_view: &NSTextView,
            identifiers: &NSArray<NSTouchBarItemIdentifier>,
        ) -> Id<NSArray<NSTouchBarItemIdentifier>>;

        #[cfg(all(feature = "AppKit_NSTextView", feature = "Foundation_NSArray"))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:candidatesForSelectedRange:)]
        unsafe fn textView_candidatesForSelectedRange(
            &self,
            text_view: &NSTextView,
            selected_range: NSRange,
        ) -> Option<Id<NSArray>>;

        #[cfg(all(
            feature = "AppKit_NSTextView",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSTextCheckingResult"
        ))]
        #[optional]
        #[method_id(@__retain_semantics Other textView:candidates:forSelectedRange:)]
        unsafe fn textView_candidates_forSelectedRange(
            &self,
            text_view: &NSTextView,
            candidates: &NSArray<NSTextCheckingResult>,
            selected_range: NSRange,
        ) -> Id<NSArray<NSTextCheckingResult>>;

        #[cfg(feature = "AppKit_NSTextView")]
        #[optional]
        #[method(textView:shouldSelectCandidateAtIndex:)]
        unsafe fn textView_shouldSelectCandidateAtIndex(
            &self,
            text_view: &NSTextView,
            index: NSUInteger,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[deprecated = "Use -textView:clickedOnLink:atIndex: instead"]
        #[optional]
        #[method(textView:clickedOnLink:)]
        unsafe fn textView_clickedOnLink(
            &self,
            text_view: &NSTextView,
            link: Option<&AnyObject>,
        ) -> bool;

        #[cfg(feature = "AppKit_NSTextView")]
        #[deprecated = "Use -textView:clickedOnCell:inRect:atIndex: instead"]
        #[optional]
        #[method(textView:clickedOnCell:inRect:)]
        unsafe fn textView_clickedOnCell_inRect(
            &self,
            text_view: &NSTextView,
            cell: Option<&ProtocolObject<dyn NSTextAttachmentCellProtocol>>,
            cell_frame: NSRect,
        );

        #[cfg(feature = "AppKit_NSTextView")]
        #[deprecated = "Use -textView:doubleClickedOnCell:inRect:atIndex: instead"]
        #[optional]
        #[method(textView:doubleClickedOnCell:inRect:)]
        unsafe fn textView_doubleClickedOnCell_inRect(
            &self,
            text_view: &NSTextView,
            cell: Option<&ProtocolObject<dyn NSTextAttachmentCellProtocol>>,
            cell_frame: NSRect,
        );

        #[cfg(all(feature = "AppKit_NSEvent", feature = "AppKit_NSTextView"))]
        #[deprecated = "Use -textView:draggedCell:inRect:event:atIndex: instead"]
        #[optional]
        #[method(textView:draggedCell:inRect:event:)]
        unsafe fn textView_draggedCell_inRect_event(
            &self,
            view: &NSTextView,
            cell: Option<&ProtocolObject<dyn NSTextAttachmentCellProtocol>>,
            rect: NSRect,
            event: Option<&NSEvent>,
        );
    }

    unsafe impl ProtocolType for dyn NSTextViewDelegate {}
);

extern_static!(NSTouchBarItemIdentifierCharacterPicker: &'static NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextColorPicker: &'static NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextStyle: &'static NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextAlignment: &'static NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextList: &'static NSTouchBarItemIdentifier);

extern_static!(NSTouchBarItemIdentifierTextFormat: &'static NSTouchBarItemIdentifier);

extern_static!(NSTextViewWillChangeNotifyingTextViewNotification: &'static NSNotificationName);

extern_static!(NSTextViewDidChangeSelectionNotification: &'static NSNotificationName);

extern_static!(NSTextViewDidChangeTypingAttributesNotification: &'static NSNotificationName);

extern_static!(NSTextViewWillSwitchToNSLayoutManagerNotification: &'static NSNotificationName);

extern_static!(NSTextViewDidSwitchToNSLayoutManagerNotification: &'static NSNotificationName);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSFindPanelAction {
        NSFindPanelActionShowFindPanel = 1,
        NSFindPanelActionNext = 2,
        NSFindPanelActionPrevious = 3,
        NSFindPanelActionReplaceAll = 4,
        NSFindPanelActionReplace = 5,
        NSFindPanelActionReplaceAndFind = 6,
        NSFindPanelActionSetFindString = 7,
        NSFindPanelActionReplaceAllInSelection = 8,
        NSFindPanelActionSelectAll = 9,
        NSFindPanelActionSelectAllInSelection = 10,
    }
);

extern_static!(NSFindPanelSearchOptionsPboardType: &'static NSPasteboardType);

typed_enum!(
    pub type NSPasteboardTypeFindPanelSearchOptionKey = NSString;
);

extern_static!(NSFindPanelCaseInsensitiveSearch: &'static NSPasteboardTypeFindPanelSearchOptionKey);

extern_static!(NSFindPanelSubstringMatch: &'static NSPasteboardTypeFindPanelSearchOptionKey);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSFindPanelSubstringMatchType {
        NSFindPanelSubstringMatchTypeContains = 0,
        NSFindPanelSubstringMatchTypeStartsWith = 1,
        NSFindPanelSubstringMatchTypeFullWord = 2,
        NSFindPanelSubstringMatchTypeEndsWith = 3,
    }
);
