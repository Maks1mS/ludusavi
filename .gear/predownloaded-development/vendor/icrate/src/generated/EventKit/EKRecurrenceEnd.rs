//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    pub struct EKRecurrenceEnd;

    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    unsafe impl ClassType for EKRecurrenceEnd {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "EventKit_EKRecurrenceEnd")]
unsafe impl NSCoding for EKRecurrenceEnd {}

#[cfg(feature = "EventKit_EKRecurrenceEnd")]
unsafe impl NSCopying for EKRecurrenceEnd {}

#[cfg(feature = "EventKit_EKRecurrenceEnd")]
unsafe impl NSObjectProtocol for EKRecurrenceEnd {}

#[cfg(feature = "EventKit_EKRecurrenceEnd")]
unsafe impl NSSecureCoding for EKRecurrenceEnd {}

extern_methods!(
    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    unsafe impl EKRecurrenceEnd {
        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other recurrenceEndWithEndDate:)]
        pub unsafe fn recurrenceEndWithEndDate(end_date: &NSDate) -> Id<Self>;

        #[method_id(@__retain_semantics Other recurrenceEndWithOccurrenceCount:)]
        pub unsafe fn recurrenceEndWithOccurrenceCount(occurrence_count: NSUInteger) -> Id<Self>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other endDate)]
        pub unsafe fn endDate(&self) -> Option<Id<NSDate>>;

        #[method(occurrenceCount)]
        pub unsafe fn occurrenceCount(&self) -> NSUInteger;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "EventKit_EKRecurrenceEnd")]
    unsafe impl EKRecurrenceEnd {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
