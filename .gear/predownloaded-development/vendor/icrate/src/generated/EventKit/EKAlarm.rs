//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreLocation::*;
use crate::EventKit::*;
use crate::Foundation::*;
use crate::MapKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "EventKit_EKAlarm")]
    pub struct EKAlarm;

    #[cfg(feature = "EventKit_EKAlarm")]
    unsafe impl ClassType for EKAlarm {
        #[inherits(NSObject)]
        type Super = EKObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "EventKit_EKAlarm")]
unsafe impl NSCopying for EKAlarm {}

#[cfg(feature = "EventKit_EKAlarm")]
unsafe impl NSObjectProtocol for EKAlarm {}

extern_methods!(
    #[cfg(feature = "EventKit_EKAlarm")]
    unsafe impl EKAlarm {
        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other alarmWithAbsoluteDate:)]
        pub unsafe fn alarmWithAbsoluteDate(date: &NSDate) -> Id<EKAlarm>;

        #[method_id(@__retain_semantics Other alarmWithRelativeOffset:)]
        pub unsafe fn alarmWithRelativeOffset(offset: NSTimeInterval) -> Id<EKAlarm>;

        #[method(relativeOffset)]
        pub unsafe fn relativeOffset(&self) -> NSTimeInterval;

        #[method(setRelativeOffset:)]
        pub unsafe fn setRelativeOffset(&self, relative_offset: NSTimeInterval);

        #[cfg(feature = "Foundation_NSDate")]
        #[method_id(@__retain_semantics Other absoluteDate)]
        pub unsafe fn absoluteDate(&self) -> Option<Id<NSDate>>;

        #[cfg(feature = "Foundation_NSDate")]
        #[method(setAbsoluteDate:)]
        pub unsafe fn setAbsoluteDate(&self, absolute_date: Option<&NSDate>);

        #[cfg(feature = "EventKit_EKStructuredLocation")]
        #[method_id(@__retain_semantics Other structuredLocation)]
        pub unsafe fn structuredLocation(&self) -> Option<Id<EKStructuredLocation>>;

        #[cfg(feature = "EventKit_EKStructuredLocation")]
        #[method(setStructuredLocation:)]
        pub unsafe fn setStructuredLocation(
            &self,
            structured_location: Option<&EKStructuredLocation>,
        );

        #[method(proximity)]
        pub unsafe fn proximity(&self) -> EKAlarmProximity;

        #[method(setProximity:)]
        pub unsafe fn setProximity(&self, proximity: EKAlarmProximity);

        #[method(type)]
        pub unsafe fn r#type(&self) -> EKAlarmType;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other emailAddress)]
        pub unsafe fn emailAddress(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setEmailAddress:)]
        pub unsafe fn setEmailAddress(&self, email_address: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other soundName)]
        pub unsafe fn soundName(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setSoundName:)]
        pub unsafe fn setSoundName(&self, sound_name: Option<&NSString>);

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated]
        #[method_id(@__retain_semantics Other url)]
        pub unsafe fn url(&self) -> Option<Id<NSURL>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[deprecated]
        #[method(setUrl:)]
        pub unsafe fn setUrl(&self, url: Option<&NSURL>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "EventKit_EKAlarm")]
    unsafe impl EKAlarm {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
