//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
#![allow(unused_imports)]
#![allow(deprecated)]
#[path = "CXAction.rs"]
mod __CXAction;
#[path = "CXAnswerCallAction.rs"]
mod __CXAnswerCallAction;
#[path = "CXBase.rs"]
mod __CXBase;
#[path = "CXCall.rs"]
mod __CXCall;
#[path = "CXCallAction.rs"]
mod __CXCallAction;
#[path = "CXCallController.rs"]
mod __CXCallController;
#[path = "CXCallDirectory.rs"]
mod __CXCallDirectory;
#[path = "CXCallDirectoryExtensionContext.rs"]
mod __CXCallDirectoryExtensionContext;
#[path = "CXCallDirectoryManager.rs"]
mod __CXCallDirectoryManager;
#[path = "CXCallDirectoryProvider.rs"]
mod __CXCallDirectoryProvider;
#[path = "CXCallObserver.rs"]
mod __CXCallObserver;
#[path = "CXCallUpdate.rs"]
mod __CXCallUpdate;
#[path = "CXEndCallAction.rs"]
mod __CXEndCallAction;
#[path = "CXError.rs"]
mod __CXError;
#[path = "CXHandle.rs"]
mod __CXHandle;
#[path = "CXPlayDTMFCallAction.rs"]
mod __CXPlayDTMFCallAction;
#[path = "CXProvider.rs"]
mod __CXProvider;
#[path = "CXProviderConfiguration.rs"]
mod __CXProviderConfiguration;
#[path = "CXSetGroupCallAction.rs"]
mod __CXSetGroupCallAction;
#[path = "CXSetHeldCallAction.rs"]
mod __CXSetHeldCallAction;
#[path = "CXSetMutedCallAction.rs"]
mod __CXSetMutedCallAction;
#[path = "CXStartCallAction.rs"]
mod __CXStartCallAction;
#[path = "CXTransaction.rs"]
mod __CXTransaction;

#[cfg(feature = "CallKit_CXAction")]
pub use self::__CXAction::CXAction;
#[cfg(feature = "CallKit_CXAnswerCallAction")]
pub use self::__CXAnswerCallAction::CXAnswerCallAction;
#[cfg(feature = "CallKit_CXCall")]
pub use self::__CXCall::CXCall;
#[cfg(feature = "CallKit_CXCallAction")]
pub use self::__CXCallAction::CXCallAction;
#[cfg(feature = "CallKit_CXCallController")]
pub use self::__CXCallController::CXCallController;
pub use self::__CXCallDirectory::CXCallDirectoryPhoneNumber;
pub use self::__CXCallDirectory::CXCallDirectoryPhoneNumberMax;
#[cfg(feature = "CallKit_CXCallDirectoryExtensionContext")]
pub use self::__CXCallDirectoryExtensionContext::CXCallDirectoryExtensionContext;
pub use self::__CXCallDirectoryExtensionContext::CXCallDirectoryExtensionContextDelegate;
#[cfg(feature = "CallKit_CXCallDirectoryManager")]
pub use self::__CXCallDirectoryManager::CXCallDirectoryManager;
pub use self::__CXCallDirectoryManager::{
    CXCallDirectoryEnabledStatus, CXCallDirectoryEnabledStatusDisabled,
    CXCallDirectoryEnabledStatusEnabled, CXCallDirectoryEnabledStatusUnknown,
};
#[cfg(feature = "CallKit_CXCallDirectoryProvider")]
pub use self::__CXCallDirectoryProvider::CXCallDirectoryProvider;
#[cfg(feature = "CallKit_CXCallObserver")]
pub use self::__CXCallObserver::CXCallObserver;
pub use self::__CXCallObserver::CXCallObserverDelegate;
#[cfg(feature = "CallKit_CXCallUpdate")]
pub use self::__CXCallUpdate::CXCallUpdate;
#[cfg(feature = "CallKit_CXEndCallAction")]
pub use self::__CXEndCallAction::CXEndCallAction;
pub use self::__CXError::CXErrorDomain;
pub use self::__CXError::CXErrorDomainCallDirectoryManager;
pub use self::__CXError::CXErrorDomainIncomingCall;
pub use self::__CXError::CXErrorDomainNotificationServiceExtension;
pub use self::__CXError::CXErrorDomainRequestTransaction;
pub use self::__CXError::{
    CXErrorCode, CXErrorCodeInvalidArgument, CXErrorCodeMissingVoIPBackgroundMode,
    CXErrorCodeUnentitled, CXErrorCodeUnknownError,
};
pub use self::__CXError::{
    CXErrorCodeCallDirectoryManagerError, CXErrorCodeCallDirectoryManagerErrorCurrentlyLoading,
    CXErrorCodeCallDirectoryManagerErrorDuplicateEntries,
    CXErrorCodeCallDirectoryManagerErrorEntriesOutOfOrder,
    CXErrorCodeCallDirectoryManagerErrorExtensionDisabled,
    CXErrorCodeCallDirectoryManagerErrorLoadingInterrupted,
    CXErrorCodeCallDirectoryManagerErrorMaximumEntriesExceeded,
    CXErrorCodeCallDirectoryManagerErrorNoExtensionFound,
    CXErrorCodeCallDirectoryManagerErrorUnexpectedIncrementalRemoval,
    CXErrorCodeCallDirectoryManagerErrorUnknown,
};
pub use self::__CXError::{
    CXErrorCodeIncomingCallError, CXErrorCodeIncomingCallErrorCallUUIDAlreadyExists,
    CXErrorCodeIncomingCallErrorFilteredByBlockList,
    CXErrorCodeIncomingCallErrorFilteredByDoNotDisturb, CXErrorCodeIncomingCallErrorUnentitled,
    CXErrorCodeIncomingCallErrorUnknown,
};
pub use self::__CXError::{
    CXErrorCodeNotificationServiceExtensionError,
    CXErrorCodeNotificationServiceExtensionErrorInvalidClientProcess,
    CXErrorCodeNotificationServiceExtensionErrorMissingNotificationFilteringEntitlement,
    CXErrorCodeNotificationServiceExtensionErrorUnknown,
};
pub use self::__CXError::{
    CXErrorCodeRequestTransactionError, CXErrorCodeRequestTransactionErrorCallUUIDAlreadyExists,
    CXErrorCodeRequestTransactionErrorEmptyTransaction,
    CXErrorCodeRequestTransactionErrorInvalidAction,
    CXErrorCodeRequestTransactionErrorMaximumCallGroupsReached,
    CXErrorCodeRequestTransactionErrorUnentitled, CXErrorCodeRequestTransactionErrorUnknown,
    CXErrorCodeRequestTransactionErrorUnknownCallProvider,
    CXErrorCodeRequestTransactionErrorUnknownCallUUID,
};
#[cfg(feature = "CallKit_CXHandle")]
pub use self::__CXHandle::CXHandle;
pub use self::__CXHandle::{
    CXHandleType, CXHandleTypeEmailAddress, CXHandleTypeGeneric, CXHandleTypePhoneNumber,
};
#[cfg(feature = "CallKit_CXPlayDTMFCallAction")]
pub use self::__CXPlayDTMFCallAction::CXPlayDTMFCallAction;
pub use self::__CXPlayDTMFCallAction::{
    CXPlayDTMFCallActionType, CXPlayDTMFCallActionTypeHardPause,
    CXPlayDTMFCallActionTypeSingleTone, CXPlayDTMFCallActionTypeSoftPause,
};
#[cfg(feature = "CallKit_CXProvider")]
pub use self::__CXProvider::CXProvider;
pub use self::__CXProvider::CXProviderDelegate;
pub use self::__CXProvider::{
    CXCallEndedReason, CXCallEndedReasonAnsweredElsewhere, CXCallEndedReasonDeclinedElsewhere,
    CXCallEndedReasonFailed, CXCallEndedReasonRemoteEnded, CXCallEndedReasonUnanswered,
};
#[cfg(feature = "CallKit_CXProviderConfiguration")]
pub use self::__CXProviderConfiguration::CXProviderConfiguration;
#[cfg(feature = "CallKit_CXSetGroupCallAction")]
pub use self::__CXSetGroupCallAction::CXSetGroupCallAction;
#[cfg(feature = "CallKit_CXSetHeldCallAction")]
pub use self::__CXSetHeldCallAction::CXSetHeldCallAction;
#[cfg(feature = "CallKit_CXSetMutedCallAction")]
pub use self::__CXSetMutedCallAction::CXSetMutedCallAction;
#[cfg(feature = "CallKit_CXStartCallAction")]
pub use self::__CXStartCallAction::CXStartCallAction;
#[cfg(feature = "CallKit_CXTransaction")]
pub use self::__CXTransaction::CXTransaction;
