//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSPersistentStoreRequestType {
        NSFetchRequestType = 1,
        NSSaveRequestType = 2,
        NSBatchInsertRequestType = 5,
        NSBatchUpdateRequestType = 6,
        NSBatchDeleteRequestType = 7,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "CoreData_NSPersistentStoreRequest")]
    pub struct NSPersistentStoreRequest;

    #[cfg(feature = "CoreData_NSPersistentStoreRequest")]
    unsafe impl ClassType for NSPersistentStoreRequest {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CoreData_NSPersistentStoreRequest")]
unsafe impl NSCopying for NSPersistentStoreRequest {}

#[cfg(feature = "CoreData_NSPersistentStoreRequest")]
unsafe impl NSObjectProtocol for NSPersistentStoreRequest {}

extern_methods!(
    #[cfg(feature = "CoreData_NSPersistentStoreRequest")]
    unsafe impl NSPersistentStoreRequest {
        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSArray"))]
        #[method_id(@__retain_semantics Other affectedStores)]
        pub unsafe fn affectedStores(&self) -> Option<Id<NSArray<NSPersistentStore>>>;

        #[cfg(all(feature = "CoreData_NSPersistentStore", feature = "Foundation_NSArray"))]
        #[method(setAffectedStores:)]
        pub unsafe fn setAffectedStores(
            &self,
            affected_stores: Option<&NSArray<NSPersistentStore>>,
        );

        #[method(requestType)]
        pub unsafe fn requestType(&self) -> NSPersistentStoreRequestType;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "CoreData_NSPersistentStoreRequest")]
    unsafe impl NSPersistentStoreRequest {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;
    }
);
